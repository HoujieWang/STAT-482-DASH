print(i)
tst_ind = sample(1: nrow(Data), 213, replace = F)
tst_data = Data[tst_ind,]; trn_data = Data[-tst_ind,]
# Weight matrix for test data
rawData = read.table("county_adjacency.munged.txt", colClasses=c("character", "character"))
G = graph.edgelist(as.matrix(rawData), directed=FALSE)
G = simplify(G, remove.loops=TRUE);V(G)$name=as.numeric(V(G)$name)
subFIPSid = V(G)$name %in% locs$fips[tst_ind]
countyGraph = induced.subgraph(G, V(G)[subFIPSid]);
graph0 = permute(countyGraph, order(V(countyGraph)$name));
nb.mat_tst = as_adjacency_matrix(graph0)
nb.mat_tst = nb.mat_tst[as.vector(sapply(as.character(locs$fips[tst_ind]), function(x){which(x == rownames(nb.mat_tst))})), ]
nb.mat_tst = nb.mat_tst[, as.vector(sapply(as.character(locs$fips[tst_ind]), function(x){which(x == colnames(nb.mat_tst))}))]
ind_rm = -which(apply(nb.mat_tst, 1, function(x){sum(x) == 0}))
if (length(ind_rm) != 0){
nb.mat_tst = nb.mat_tst[ind_rm, ind_rm]
dist_mat = spDists(as.matrix(locs[locs$fips %in% rownames(nb.mat_tst), 1:2]))
diag(dist_mat) = 1; dist_mat = 1/dist_mat^t
nb.mat_tst = dist_mat
# nb.mat_tst = nb.mat_tst*dist_mat
# nb.mat_tst = apply(nb.mat_tst, 1, function(x){x/sum(x)})
tst_data = tst_data[ind_rm, ]
nb.w_tst = mat2listw(nb.mat_tst)
} else {
dist_mat = spDists(as.matrix(locs[locs$fips %in% rownames(nb.mat_tst), 1:2]))
diag(dist_mat) = 1; dist_mat = 1/dist_mat^t
nb.mat_tst = dist_mat
# nb.mat_tst = nb.mat_tst*dist_mat
# nb.mat_tst = apply(nb.mat_tst, 1, function(x){x/sum(x)})
nb.w_tst = mat2listw(nb.mat_tst)
}
# Weight matrix for training data
rawData = read.table("county_adjacency.munged.txt", colClasses=c("character", "character"))
G = graph.edgelist(as.matrix(rawData), directed=FALSE)
G = simplify(G, remove.loops=TRUE);V(G)$name=as.numeric(V(G)$name)
subFIPSid = V(G)$name %in% locs$fips[-tst_ind]
countyGraph = induced.subgraph(G, V(G)[subFIPSid]);
graph0 = permute(countyGraph, order(V(countyGraph)$name));
nb.mat_trn = as_adjacency_matrix(graph0)
nb.mat_trn = nb.mat_trn[as.vector(sapply(as.character(locs$fips[-tst_ind]), function(x){which(x == rownames(nb.mat_trn))})), ]
nb.mat_trn = nb.mat_trn[, as.vector(sapply(as.character(locs$fips[-tst_ind]), function(x){which(x == colnames(nb.mat_trn))}))]
ind_rm = -which(apply(nb.mat_trn, 1, function(x){sum(x) == 0}))
if (length(ind_rm) != 0){
nb.mat_trn = nb.mat_trn[ind_rm, ind_rm]
dist_mat = spDists(as.matrix(locs[locs$fips %in% rownames(nb.mat_trn), 1:2]))
diag(dist_mat) = 1; dist_mat = 1/dist_mat^t
nb.mat_trn = dist_mat
# nb.mat_trn = nb.mat_trn*dist_mat
trn_data = trn_data[ind_rm, ]
# nb.mat_trn = apply(nb.mat_trn, 1, function(x){x/sum(x)})
nb.w_trn = mat2listw(nb.mat_trn)
} else {
dist_mat = spDists(as.matrix(locs[, 1:2]))
diag(dist_mat) = 1; dist_mat = 1/dist_mat^t
nb.mat_trn = dist_mat
# nb.mat_trn = nb.mat_trn*dist_mat
# nb.mat_trn = apply(nb.mat_trn, 1, function(x){x/sum(x)})
nb.w_trn = mat2listw(nb.mat_trn)
}
# dist_mat = spDists(as.matrix(locs[, 1:2]))
# diag(dist_mat) = 1; dist_mat = 1/dist_mat
# nb.mat = nb.mat*dist_mat
fit = lagsarlm(trn_data$y~., data = trn_data, nb.w_trn)
rho = as.vector(coef(fit)[1]); beta = as.vector(coef(fit)[-1])
res = tst_data[, 1] - as.vector(solve(diag(1, nrow = nrow(nb.mat_tst)) - rho*nb.mat_tst) %*% as.matrix(cbind(rep(1, nrow(tst_data)), tst_data[, -1])) %*% beta)
mse = c(mse, sum(res^2))
rmse = c(rmse, sd(res))
}
trn_data
dim(trn_data)
nb.w_trn
dim(dist_mat)
ind_rm
nb.mat_trn
apply(nb.mat_trn, 1, function(x){sum(x) == 0})
rm(list = ls())
library(igraph); library(spdep); library(spatialreg); library(car); library(glmnet); library(tseries); library(sp); library(gvlma)
load("Data.RData"); load("locs.Rdata")
rownames(Data) = locs$fips
print(i)
tst_ind = sample(1: nrow(Data), 213, replace = F)
tst_data = Data[tst_ind,]; trn_data = Data[-tst_ind,]
# Weight matrix for test data
rawData = read.table("county_adjacency.munged.txt", colClasses=c("character", "character"))
G = graph.edgelist(as.matrix(rawData), directed=FALSE)
G = simplify(G, remove.loops=TRUE);V(G)$name=as.numeric(V(G)$name)
subFIPSid = V(G)$name %in% locs$fips[tst_ind]
countyGraph = induced.subgraph(G, V(G)[subFIPSid]);
graph0 = permute(countyGraph, order(V(countyGraph)$name));
nb.mat_tst = as_adjacency_matrix(graph0)
nb.mat_tst = nb.mat_tst[as.vector(sapply(as.character(locs$fips[tst_ind]), function(x){which(x == rownames(nb.mat_tst))})), ]
nb.mat_tst = nb.mat_tst[, as.vector(sapply(as.character(locs$fips[tst_ind]), function(x){which(x == colnames(nb.mat_tst))}))]
ind_rm = -which(apply(nb.mat_tst, 1, function(x){sum(x) == 0}))
ind_rm
if (length(ind_rm) != 0){
nb.mat_tst = nb.mat_tst[ind_rm, ind_rm]
dist_mat = spDists(as.matrix(locs[locs$fips %in% rownames(nb.mat_tst), 1:2]))
diag(dist_mat) = 1; dist_mat = 1/dist_mat^t
nb.mat_tst = dist_mat
# nb.mat_tst = nb.mat_tst*dist_mat
# nb.mat_tst = apply(nb.mat_tst, 1, function(x){x/sum(x)})
tst_data = tst_data[ind_rm, ]
nb.w_tst = mat2listw(nb.mat_tst)
} else {
dist_mat = spDists(as.matrix(locs[locs$fips %in% rownames(nb.mat_tst), 1:2]))
diag(dist_mat) = 1; dist_mat = 1/dist_mat^t
nb.mat_tst = dist_mat
# nb.mat_tst = nb.mat_tst*dist_mat
# nb.mat_tst = apply(nb.mat_tst, 1, function(x){x/sum(x)})
nb.w_tst = mat2listw(nb.mat_tst)
}
nb.mat_tst
locs$fips %in% rownames(nb.mat_tst)
dist_mat = spDists(as.matrix(locs[locs$fips %in% rownames(nb.mat_tst), 1:2]))
dist_mat
diag(dist_mat) = 1; dist_mat = 1/dist_mat^t
dist_mat^t
t
t = 2
diag(dist_mat) = 1; dist_mat = 1/dist_mat^t
nb.mat_tst = dist_mat
# nb.mat_tst = nb.mat_tst*dist_mat
# nb.mat_tst = apply(nb.mat_tst, 1, function(x){x/sum(x)})
nb.w_tst = mat2listw(nb.mat_tst)
# Weight matrix for training data
rawData = read.table("county_adjacency.munged.txt", colClasses=c("character", "character"))
G = graph.edgelist(as.matrix(rawData), directed=FALSE)
subFIPSid = V(G)$name %in% locs$fips[-tst_ind]
countyGraph = induced.subgraph(G, V(G)[subFIPSid]);
nb.mat_trn = as_adjacency_matrix(graph0)
nb.mat_trn = nb.mat_trn[as.vector(sapply(as.character(locs$fips[-tst_ind]), function(x){which(x == rownames(nb.mat_trn))})), ]
nb.mat_trn = nb.mat_trn[, as.vector(sapply(as.character(locs$fips[-tst_ind]), function(x){which(x == colnames(nb.mat_trn))}))]
ind_rm = -which(apply(nb.mat_trn, 1, function(x){sum(x) == 0}))
rawData = read.table("county_adjacency.munged.txt", colClasses=c("character", "character"))
G = graph.edgelist(as.matrix(rawData), directed=FALSE)
G = simplify(G, remove.loops=TRUE);V(G)$name=as.numeric(V(G)$name)
subFIPSid = V(G)$name %in% locs$fips[-tst_ind]
countyGraph = induced.subgraph(G, V(G)[subFIPSid]);
graph0 = permute(countyGraph, order(V(countyGraph)$name));
nb.mat_trn = as_adjacency_matrix(graph0)
nb.mat_trn
nb.mat_trn = nb.mat_trn[as.vector(sapply(as.character(locs$fips[-tst_ind]), function(x){which(x == rownames(nb.mat_trn))})), ]
nb.mat_trn = nb.mat_trn[, as.vector(sapply(as.character(locs$fips[-tst_ind]), function(x){which(x == colnames(nb.mat_trn))}))]
nb.mat_trn
ind_rm = -which(apply(nb.mat_trn, 1, function(x){sum(x) == 0}))
ind_rm
nb.mat_trn = nb.mat_trn[ind_rm, ind_rm]
dist_mat = spDists(as.matrix(locs[locs$fips %in% rownames(nb.mat_trn), 1:2]))
diag(dist_mat) = 1; dist_mat = 1/dist_mat^t
nb.mat_trn = dist_mat
# nb.mat_trn = nb.mat_trn*dist_mat
trn_data = trn_data[ind_rm, ]
# nb.mat_trn = apply(nb.mat_trn, 1, function(x){x/sum(x)})
nb.w_trn = mat2listw(nb.mat_trn)
# dist_mat = spDists(as.matrix(locs[, 1:2]))
# diag(dist_mat) = 1; dist_mat = 1/dist_mat
# nb.mat = nb.mat*dist_mat
fit = lagsarlm(trn_data$y~., data = trn_data, nb.w_trn)
res = tst_data[, 1] - as.vector(solve(diag(1, nrow = nrow(nb.mat_tst)) - rho*nb.mat_tst) %*% as.matrix(cbind(rep(1, nrow(tst_data)), tst_data[, -1])) %*% beta)
rho = as.vector(coef(fit)[1]); beta = as.vector(coef(fit)[-1])
res = tst_data[, 1] - as.vector(solve(diag(1, nrow = nrow(nb.mat_tst)) - rho*nb.mat_tst) %*% as.matrix(cbind(rep(1, nrow(tst_data)), tst_data[, -1])) %*% beta)
as.vector(solve(diag(1, nrow = nrow(nb.mat_tst)) - rho*nb.mat_tst)
as.vector(solve(diag(1, nrow = nrow(nb.mat_tst)) - rho*nb.mat_tst) %*% as.matrix(cbind(rep(1, nrow(tst_data)), tst_data[, -1]))
solve(diag(1, nrow = nrow(nb.mat_tst)) - rho*nb.mat_tst) %*% as.matrix(cbind(rep(1, nrow(tst_data)), tst_data[, -1])) %*% beta
as.matrix(cbind(rep(1, nrow(tst_data))
solve(diag(1, nrow = nrow(nb.mat_tst)) - rho*nb.mat_tst)
solve(diag(1, nrow = nrow(nb.mat_tst)) - rho*nb.mat_tst)
solve(diag(1, nrow = nrow(nb.mat_tst)) - rho*nb.mat_tst) %*% as.matrix(cbind(rep(1, nrow(tst_data)), tst_data[, -1]))
dim(solve(diag(1, nrow = nrow(nb.mat_tst)) - rho*nb.mat_tst))
dim(as.matrix(cbind(rep(1, nrow(tst_data)), tst_data[, -1])))
ind_rm
tst_ind = sample(1: nrow(Data), 213, replace = F)
tst_data = Data[tst_ind,]; trn_data = Data[-tst_ind,]
# Weight matrix for test data
rawData = read.table("county_adjacency.munged.txt", colClasses=c("character", "character"))
G = graph.edgelist(as.matrix(rawData), directed=FALSE)
G = simplify(G, remove.loops=TRUE);V(G)$name=as.numeric(V(G)$name)
subFIPSid = V(G)$name %in% locs$fips[tst_ind]
countyGraph = induced.subgraph(G, V(G)[subFIPSid]);
graph0 = permute(countyGraph, order(V(countyGraph)$name));
nb.mat_tst = as_adjacency_matrix(graph0)
nb.mat_tst = nb.mat_tst[as.vector(sapply(as.character(locs$fips[tst_ind]), function(x){which(x == rownames(nb.mat_tst))})), ]
nb.mat_tst = nb.mat_tst[, as.vector(sapply(as.character(locs$fips[tst_ind]), function(x){which(x == colnames(nb.mat_tst))}))]
ind_rm = -which(apply(nb.mat_tst, 1, function(x){sum(x) == 0}))
if (length(ind_rm) != 0){
nb.mat_tst = nb.mat_tst[ind_rm, ind_rm]
dist_mat = spDists(as.matrix(locs[locs$fips %in% rownames(nb.mat_tst), 1:2]))
diag(dist_mat) = 1; dist_mat = 1/dist_mat^t
nb.mat_tst = dist_mat
# nb.mat_tst = nb.mat_tst*dist_mat
# nb.mat_tst = apply(nb.mat_tst, 1, function(x){x/sum(x)})
tst_data = tst_data[ind_rm, ]
nb.w_tst = mat2listw(nb.mat_tst)
} else {
dist_mat = spDists(as.matrix(locs[locs$fips %in% rownames(nb.mat_tst), 1:2]))
diag(dist_mat) = 1; dist_mat = 1/dist_mat^t
nb.mat_tst = dist_mat
# nb.mat_tst = nb.mat_tst*dist_mat
# nb.mat_tst = apply(nb.mat_tst, 1, function(x){x/sum(x)})
nb.w_tst = mat2listw(nb.mat_tst)
}
# Weight matrix for training data
rawData = read.table("county_adjacency.munged.txt", colClasses=c("character", "character"))
G = graph.edgelist(as.matrix(rawData), directed=FALSE)
G = simplify(G, remove.loops=TRUE);V(G)$name=as.numeric(V(G)$name)
subFIPSid = V(G)$name %in% locs$fips[-tst_ind]
countyGraph = induced.subgraph(G, V(G)[subFIPSid]);
graph0 = permute(countyGraph, order(V(countyGraph)$name));
nb.mat_trn = as_adjacency_matrix(graph0)
nb.mat_trn = nb.mat_trn[as.vector(sapply(as.character(locs$fips[-tst_ind]), function(x){which(x == rownames(nb.mat_trn))})), ]
nb.mat_trn = nb.mat_trn[, as.vector(sapply(as.character(locs$fips[-tst_ind]), function(x){which(x == colnames(nb.mat_trn))}))]
ind_rm = -which(apply(nb.mat_trn, 1, function(x){sum(x) == 0}))
if (length(ind_rm) != 0){
nb.mat_trn = nb.mat_trn[ind_rm, ind_rm]
dist_mat = spDists(as.matrix(locs[locs$fips %in% rownames(nb.mat_trn), 1:2]))
diag(dist_mat) = 1; dist_mat = 1/dist_mat^t
nb.mat_trn = dist_mat
# nb.mat_trn = nb.mat_trn*dist_mat
trn_data = trn_data[ind_rm, ]
# nb.mat_trn = apply(nb.mat_trn, 1, function(x){x/sum(x)})
nb.w_trn = mat2listw(nb.mat_trn)
} else {
dist_mat = spDists(as.matrix(locs[, 1:2]))
diag(dist_mat) = 1; dist_mat = 1/dist_mat^t
nb.mat_trn = dist_mat
# nb.mat_trn = nb.mat_trn*dist_mat
# nb.mat_trn = apply(nb.mat_trn, 1, function(x){x/sum(x)})
nb.w_trn = mat2listw(nb.mat_trn)
}
# dist_mat = spDists(as.matrix(locs[, 1:2]))
# diag(dist_mat) = 1; dist_mat = 1/dist_mat
# nb.mat = nb.mat*dist_mat
fit = lagsarlm(trn_data$y~., data = trn_data, nb.w_trn)
rho = as.vector(coef(fit)[1]); beta = as.vector(coef(fit)[-1])
res = tst_data[, 1] - as.vector(solve(diag(1, nrow = nrow(nb.mat_tst)) - rho*nb.mat_tst) %*% as.matrix(cbind(rep(1, nrow(tst_data)), tst_data[, -1])) %*% beta)
sd(res)
t = 2
rmse = c()
mse = c()
for (i in 1: 10){
print(i)
tst_ind = sample(1: nrow(Data), 213, replace = F)
tst_data = Data[tst_ind,]; trn_data = Data[-tst_ind,]
# Weight matrix for test data
rawData = read.table("county_adjacency.munged.txt", colClasses=c("character", "character"))
G = graph.edgelist(as.matrix(rawData), directed=FALSE)
G = simplify(G, remove.loops=TRUE);V(G)$name=as.numeric(V(G)$name)
subFIPSid = V(G)$name %in% locs$fips[tst_ind]
countyGraph = induced.subgraph(G, V(G)[subFIPSid]);
graph0 = permute(countyGraph, order(V(countyGraph)$name));
nb.mat_tst = as_adjacency_matrix(graph0)
nb.mat_tst = nb.mat_tst[as.vector(sapply(as.character(locs$fips[tst_ind]), function(x){which(x == rownames(nb.mat_tst))})), ]
nb.mat_tst = nb.mat_tst[, as.vector(sapply(as.character(locs$fips[tst_ind]), function(x){which(x == colnames(nb.mat_tst))}))]
ind_rm = -which(apply(nb.mat_tst, 1, function(x){sum(x) == 0}))
if (length(ind_rm) != 0){
nb.mat_tst = nb.mat_tst[ind_rm, ind_rm]
dist_mat = spDists(as.matrix(locs[locs$fips %in% rownames(nb.mat_tst), 1:2]))
diag(dist_mat) = 1; dist_mat = 1/dist_mat^t
nb.mat_tst = dist_mat
# nb.mat_tst = nb.mat_tst*dist_mat
# nb.mat_tst = apply(nb.mat_tst, 1, function(x){x/sum(x)})
tst_data = tst_data[ind_rm, ]
nb.w_tst = mat2listw(nb.mat_tst)
} else {
dist_mat = spDists(as.matrix(locs[locs$fips %in% rownames(nb.mat_tst), 1:2]))
diag(dist_mat) = 1; dist_mat = 1/dist_mat^t
nb.mat_tst = dist_mat
# nb.mat_tst = nb.mat_tst*dist_mat
# nb.mat_tst = apply(nb.mat_tst, 1, function(x){x/sum(x)})
nb.w_tst = mat2listw(nb.mat_tst)
}
# Weight matrix for training data
rawData = read.table("county_adjacency.munged.txt", colClasses=c("character", "character"))
G = graph.edgelist(as.matrix(rawData), directed=FALSE)
G = simplify(G, remove.loops=TRUE);V(G)$name=as.numeric(V(G)$name)
subFIPSid = V(G)$name %in% locs$fips[-tst_ind]
countyGraph = induced.subgraph(G, V(G)[subFIPSid]);
graph0 = permute(countyGraph, order(V(countyGraph)$name));
nb.mat_trn = as_adjacency_matrix(graph0)
nb.mat_trn = nb.mat_trn[as.vector(sapply(as.character(locs$fips[-tst_ind]), function(x){which(x == rownames(nb.mat_trn))})), ]
nb.mat_trn = nb.mat_trn[, as.vector(sapply(as.character(locs$fips[-tst_ind]), function(x){which(x == colnames(nb.mat_trn))}))]
ind_rm = -which(apply(nb.mat_trn, 1, function(x){sum(x) == 0}))
if (length(ind_rm) != 0){
nb.mat_trn = nb.mat_trn[ind_rm, ind_rm]
dist_mat = spDists(as.matrix(locs[locs$fips %in% rownames(nb.mat_trn), 1:2]))
diag(dist_mat) = 1; dist_mat = 1/dist_mat^t
nb.mat_trn = dist_mat
# nb.mat_trn = nb.mat_trn*dist_mat
trn_data = trn_data[ind_rm, ]
# nb.mat_trn = apply(nb.mat_trn, 1, function(x){x/sum(x)})
nb.w_trn = mat2listw(nb.mat_trn)
} else {
dist_mat = spDists(as.matrix(locs[, 1:2]))
diag(dist_mat) = 1; dist_mat = 1/dist_mat^t
nb.mat_trn = dist_mat
# nb.mat_trn = nb.mat_trn*dist_mat
# nb.mat_trn = apply(nb.mat_trn, 1, function(x){x/sum(x)})
nb.w_trn = mat2listw(nb.mat_trn)
}
# dist_mat = spDists(as.matrix(locs[, 1:2]))
# diag(dist_mat) = 1; dist_mat = 1/dist_mat
# nb.mat = nb.mat*dist_mat
fit = lagsarlm(trn_data$y~., data = trn_data, nb.w_trn)
rho = as.vector(coef(fit)[1]); beta = as.vector(coef(fit)[-1])
res = tst_data[, 1] - as.vector(solve(diag(1, nrow = nrow(nb.mat_tst)) - rho*nb.mat_tst) %*% as.matrix(cbind(rep(1, nrow(tst_data)), tst_data[, -1])) %*% beta)
mse = c(mse, sum(res^2))
rmse = c(rmse, sd(res))
}
list("RMSE" = mean(rmse))
rmse
t = 0.001
rmse = c()
mse = c()
for (i in 1: 10){
print(i)
tst_ind = sample(1: nrow(Data), 213, replace = F)
tst_data = Data[tst_ind,]; trn_data = Data[-tst_ind,]
# Weight matrix for test data
rawData = read.table("county_adjacency.munged.txt", colClasses=c("character", "character"))
G = graph.edgelist(as.matrix(rawData), directed=FALSE)
G = simplify(G, remove.loops=TRUE);V(G)$name=as.numeric(V(G)$name)
subFIPSid = V(G)$name %in% locs$fips[tst_ind]
countyGraph = induced.subgraph(G, V(G)[subFIPSid]);
graph0 = permute(countyGraph, order(V(countyGraph)$name));
nb.mat_tst = as_adjacency_matrix(graph0)
nb.mat_tst = nb.mat_tst[as.vector(sapply(as.character(locs$fips[tst_ind]), function(x){which(x == rownames(nb.mat_tst))})), ]
nb.mat_tst = nb.mat_tst[, as.vector(sapply(as.character(locs$fips[tst_ind]), function(x){which(x == colnames(nb.mat_tst))}))]
ind_rm = -which(apply(nb.mat_tst, 1, function(x){sum(x) == 0}))
if (length(ind_rm) != 0){
nb.mat_tst = nb.mat_tst[ind_rm, ind_rm]
dist_mat = spDists(as.matrix(locs[locs$fips %in% rownames(nb.mat_tst), 1:2]))
diag(dist_mat) = 1; dist_mat = 1/dist_mat^t
nb.mat_tst = dist_mat
# nb.mat_tst = nb.mat_tst*dist_mat
# nb.mat_tst = apply(nb.mat_tst, 1, function(x){x/sum(x)})
tst_data = tst_data[ind_rm, ]
nb.w_tst = mat2listw(nb.mat_tst)
} else {
dist_mat = spDists(as.matrix(locs[locs$fips %in% rownames(nb.mat_tst), 1:2]))
diag(dist_mat) = 1; dist_mat = 1/dist_mat^t
nb.mat_tst = dist_mat
# nb.mat_tst = nb.mat_tst*dist_mat
# nb.mat_tst = apply(nb.mat_tst, 1, function(x){x/sum(x)})
nb.w_tst = mat2listw(nb.mat_tst)
}
# Weight matrix for training data
rawData = read.table("county_adjacency.munged.txt", colClasses=c("character", "character"))
G = graph.edgelist(as.matrix(rawData), directed=FALSE)
G = simplify(G, remove.loops=TRUE);V(G)$name=as.numeric(V(G)$name)
subFIPSid = V(G)$name %in% locs$fips[-tst_ind]
countyGraph = induced.subgraph(G, V(G)[subFIPSid]);
graph0 = permute(countyGraph, order(V(countyGraph)$name));
nb.mat_trn = as_adjacency_matrix(graph0)
nb.mat_trn = nb.mat_trn[as.vector(sapply(as.character(locs$fips[-tst_ind]), function(x){which(x == rownames(nb.mat_trn))})), ]
nb.mat_trn = nb.mat_trn[, as.vector(sapply(as.character(locs$fips[-tst_ind]), function(x){which(x == colnames(nb.mat_trn))}))]
ind_rm = -which(apply(nb.mat_trn, 1, function(x){sum(x) == 0}))
if (length(ind_rm) != 0){
nb.mat_trn = nb.mat_trn[ind_rm, ind_rm]
dist_mat = spDists(as.matrix(locs[locs$fips %in% rownames(nb.mat_trn), 1:2]))
diag(dist_mat) = 1; dist_mat = 1/dist_mat^t
nb.mat_trn = dist_mat
# nb.mat_trn = nb.mat_trn*dist_mat
trn_data = trn_data[ind_rm, ]
# nb.mat_trn = apply(nb.mat_trn, 1, function(x){x/sum(x)})
nb.w_trn = mat2listw(nb.mat_trn)
} else {
dist_mat = spDists(as.matrix(locs[, 1:2]))
diag(dist_mat) = 1; dist_mat = 1/dist_mat^t
nb.mat_trn = dist_mat
# nb.mat_trn = nb.mat_trn*dist_mat
# nb.mat_trn = apply(nb.mat_trn, 1, function(x){x/sum(x)})
nb.w_trn = mat2listw(nb.mat_trn)
}
# dist_mat = spDists(as.matrix(locs[, 1:2]))
# diag(dist_mat) = 1; dist_mat = 1/dist_mat
# nb.mat = nb.mat*dist_mat
fit = lagsarlm(trn_data$y~., data = trn_data, nb.w_trn)
rho = as.vector(coef(fit)[1]); beta = as.vector(coef(fit)[-1])
res = tst_data[, 1] - as.vector(solve(diag(1, nrow = nrow(nb.mat_tst)) - rho*nb.mat_tst) %*% as.matrix(cbind(rep(1, nrow(tst_data)), tst_data[, -1])) %*% beta)
mse = c(mse, sum(res^2))
rmse = c(rmse, sd(res))
}
list("RMSE" = mean(rmse))
rmse
t = 0.01
rmse = c()
mse = c()
for (i in 1: 10){
print(i)
tst_ind = sample(1: nrow(Data), 213, replace = F)
tst_data = Data[tst_ind,]; trn_data = Data[-tst_ind,]
# Weight matrix for test data
rawData = read.table("county_adjacency.munged.txt", colClasses=c("character", "character"))
G = graph.edgelist(as.matrix(rawData), directed=FALSE)
G = simplify(G, remove.loops=TRUE);V(G)$name=as.numeric(V(G)$name)
subFIPSid = V(G)$name %in% locs$fips[tst_ind]
countyGraph = induced.subgraph(G, V(G)[subFIPSid]);
graph0 = permute(countyGraph, order(V(countyGraph)$name));
nb.mat_tst = as_adjacency_matrix(graph0)
nb.mat_tst = nb.mat_tst[as.vector(sapply(as.character(locs$fips[tst_ind]), function(x){which(x == rownames(nb.mat_tst))})), ]
nb.mat_tst = nb.mat_tst[, as.vector(sapply(as.character(locs$fips[tst_ind]), function(x){which(x == colnames(nb.mat_tst))}))]
ind_rm = -which(apply(nb.mat_tst, 1, function(x){sum(x) == 0}))
if (length(ind_rm) != 0){
nb.mat_tst = nb.mat_tst[ind_rm, ind_rm]
dist_mat = spDists(as.matrix(locs[locs$fips %in% rownames(nb.mat_tst), 1:2]))
diag(dist_mat) = 1; dist_mat = 1/dist_mat^t
nb.mat_tst = dist_mat
# nb.mat_tst = nb.mat_tst*dist_mat
# nb.mat_tst = apply(nb.mat_tst, 1, function(x){x/sum(x)})
tst_data = tst_data[ind_rm, ]
nb.w_tst = mat2listw(nb.mat_tst)
} else {
dist_mat = spDists(as.matrix(locs[locs$fips %in% rownames(nb.mat_tst), 1:2]))
diag(dist_mat) = 1; dist_mat = 1/dist_mat^t
nb.mat_tst = dist_mat
# nb.mat_tst = nb.mat_tst*dist_mat
# nb.mat_tst = apply(nb.mat_tst, 1, function(x){x/sum(x)})
nb.w_tst = mat2listw(nb.mat_tst)
}
# Weight matrix for training data
rawData = read.table("county_adjacency.munged.txt", colClasses=c("character", "character"))
G = graph.edgelist(as.matrix(rawData), directed=FALSE)
G = simplify(G, remove.loops=TRUE);V(G)$name=as.numeric(V(G)$name)
subFIPSid = V(G)$name %in% locs$fips[-tst_ind]
countyGraph = induced.subgraph(G, V(G)[subFIPSid]);
graph0 = permute(countyGraph, order(V(countyGraph)$name));
nb.mat_trn = as_adjacency_matrix(graph0)
nb.mat_trn = nb.mat_trn[as.vector(sapply(as.character(locs$fips[-tst_ind]), function(x){which(x == rownames(nb.mat_trn))})), ]
nb.mat_trn = nb.mat_trn[, as.vector(sapply(as.character(locs$fips[-tst_ind]), function(x){which(x == colnames(nb.mat_trn))}))]
ind_rm = -which(apply(nb.mat_trn, 1, function(x){sum(x) == 0}))
if (length(ind_rm) != 0){
nb.mat_trn = nb.mat_trn[ind_rm, ind_rm]
dist_mat = spDists(as.matrix(locs[locs$fips %in% rownames(nb.mat_trn), 1:2]))
diag(dist_mat) = 1; dist_mat = 1/dist_mat^t
nb.mat_trn = dist_mat
# nb.mat_trn = nb.mat_trn*dist_mat
trn_data = trn_data[ind_rm, ]
# nb.mat_trn = apply(nb.mat_trn, 1, function(x){x/sum(x)})
nb.w_trn = mat2listw(nb.mat_trn)
} else {
dist_mat = spDists(as.matrix(locs[, 1:2]))
diag(dist_mat) = 1; dist_mat = 1/dist_mat^t
nb.mat_trn = dist_mat
# nb.mat_trn = nb.mat_trn*dist_mat
# nb.mat_trn = apply(nb.mat_trn, 1, function(x){x/sum(x)})
nb.w_trn = mat2listw(nb.mat_trn)
}
# dist_mat = spDists(as.matrix(locs[, 1:2]))
# diag(dist_mat) = 1; dist_mat = 1/dist_mat
# nb.mat = nb.mat*dist_mat
fit = lagsarlm(trn_data$y~., data = trn_data, nb.w_trn)
rho = as.vector(coef(fit)[1]); beta = as.vector(coef(fit)[-1])
res = tst_data[, 1] - as.vector(solve(diag(1, nrow = nrow(nb.mat_tst)) - rho*nb.mat_tst) %*% as.matrix(cbind(rep(1, nrow(tst_data)), tst_data[, -1])) %*% beta)
mse = c(mse, sum(res^2))
rmse = c(rmse, sd(res))
}
list("RMSE" = mean(rmse))
rmse = c()
mse = c()
for (i in 1: 10){
print(i)
tst_ind = sample(1: nrow(Data), 213, replace = F)
tst_data = Data[tst_ind,]; trn_data = Data[-tst_ind,]
# Weight matrix for test data
rawData = read.table("county_adjacency.munged.txt", colClasses=c("character", "character"))
G = graph.edgelist(as.matrix(rawData), directed=FALSE)
G = simplify(G, remove.loops=TRUE);V(G)$name=as.numeric(V(G)$name)
subFIPSid = V(G)$name %in% locs$fips[tst_ind]
countyGraph = induced.subgraph(G, V(G)[subFIPSid]);
graph0 = permute(countyGraph, order(V(countyGraph)$name)); ### this is the dense graph to begin with.
nb.mat_tst = as_adjacency_matrix(graph0)
nb.mat_tst = nb.mat_tst[as.vector(sapply(as.character(locs$fips[tst_ind]), function(x){which(x == rownames(nb.mat_tst))})), ]
nb.mat_tst = nb.mat_tst[, as.vector(sapply(as.character(locs$fips[tst_ind]), function(x){which(x == colnames(nb.mat_tst))}))]
ind_rm = -which(apply(nb.mat_tst, 1, function(x){sum(x) == 0}))
if (length(ind_rm) != 0){
nb.mat_tst = nb.mat_tst[ind_rm, ind_rm]
tst_data = tst_data[ind_rm, ]
nb.w_tst = mat2listw(nb.mat_tst)
} else {
nb.w_tst = mat2listw(nb.mat_tst)
}
# dist_mat = spDists(as.matrix(locs[, 1:2]))
# diag(dist_mat) = 1; dist_mat = 1/dist_mat
# nb.mat = nb.mat*dist_mat
# Weight matrix for training data
rawData = read.table("county_adjacency.munged.txt", colClasses=c("character", "character"))
G = graph.edgelist(as.matrix(rawData), directed=FALSE)
G = simplify(G, remove.loops=TRUE);V(G)$name=as.numeric(V(G)$name)
subFIPSid = V(G)$name %in% locs$fips[-tst_ind]
countyGraph = induced.subgraph(G, V(G)[subFIPSid]);
graph0 = permute(countyGraph, order(V(countyGraph)$name));
nb.mat_trn = as_adjacency_matrix(graph0)
nb.mat_trn = nb.mat_trn[as.vector(sapply(as.character(locs$fips[-tst_ind]), function(x){which(x == rownames(nb.mat_trn))})), ]
nb.mat_trn = nb.mat_trn[, as.vector(sapply(as.character(locs$fips[-tst_ind]), function(x){which(x == colnames(nb.mat_trn))}))]
ind_rm = -which(apply(nb.mat_trn, 1, function(x){sum(x) == 0}))
if (length(ind_rm) != 0){
nb.mat_trn = nb.mat_trn[ind_rm, ind_rm]
trn_data = trn_data[ind_rm, ]
nb.w_trn = mat2listw(nb.mat_trn)
} else {
nb.w_trn = mat2listw(nb.mat_trn)
}
# dist_mat = spDists(as.matrix(locs[, 1:2]))
# diag(dist_mat) = 1; dist_mat = 1/dist_mat
# nb.mat = nb.mat*dist_mat
fit = lagsarlm(trn_data$y~., data = trn_data, nb.w_trn)
rho = as.vector(coef(fit)[1]); beta = as.vector(coef(fit)[-1])
res = tst_data[, 1] - as.vector(solve(diag(1, nrow = nrow(nb.mat_tst)) - rho*nb.mat_tst) %*% as.matrix(cbind(rep(1, nrow(tst_data)), tst_data[, -1])) %*% beta)
mse = c(mse, sum(res^2))
rmse = c(rmse, sd(res))
}
list("RMSE" = mean(rmse))
