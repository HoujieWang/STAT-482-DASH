mutate(ld50 = - alpha/beta)
sam <- ggplot(data = samps) +
geom_point(aes(alpha, beta), color = 'blue') +
coord_cartesian(xlim = c(-4, 4), ylim = c(-10, 30)) +
labs(title = 'Prior draws', x = 'alpha', y = 'beta')
sam
pos3 <- ggplot(data = data.frame(ab_grid, post_den), aes(x = ab_grid[, 1], y = ab_grid[, 2])) +
geom_raster(aes(fill = post_den, alpha = post_den), interpolate = T) +
geom_contour(aes(z = post_den), colour = 'black', size = 0.2) +
coord_cartesian(xlim = c(-4, 4), ylim = c(-10, 30)) +
labs(title = 'Posterior density evaluated in grid', x = 'alpha', y = 'beta') +
scale_fill_gradient(low = 'yellow', high = 'red', guide = F) +
scale_alpha(range = c(0, 1), guide = F)
S = 50
ab_grid = expand.grid(seq(-4, 4, length.out = S), seq(-10, 30, length.out = S))
post_den = apply(ab_grid, 1, function(z){
alpha = z[1]; beta = z[2]
likeli(x, y, n, alpha, beta)*dmvnorm(c(alpha, beta), mean = c(0, 10), sigma = matrix(c(4, 10, 10, 100), ncol = 2))
})
nsamp <- 1000
samp_indices <- sample(length(post_den), size = nsamp,
replace = T, prob = post_den/sum(post_den))
samp_A <- ab_grid[samp_indices[1:nsamp], 1]
samp_B <- ab_grid[samp_indices[1:nsamp], 2]
samps <- data_frame(ind = 1:nsamp, alpha = samp_A, beta = samp_B) %>%
mutate(ld50 = - alpha/beta)
sam <- ggplot(data = samps) +
geom_point(aes(alpha, beta), color = 'blue') +
coord_cartesian(xlim = c(-4, 4), ylim = c(-10, 30)) +
labs(title = 'Posterior draws', x = 'alpha', y = 'beta')
sam
pos3 <- ggplot(data = data.frame(ab_grid, post_den), aes(x = ab_grid[, 1], y = ab_grid[, 2])) +
geom_raster(aes(fill = post_den, alpha = post_den), interpolate = T) +
geom_contour(aes(z = post_den), colour = 'black', size = 0.2) +
coord_cartesian(xlim = c(-4, 4), ylim = c(-10, 30)) +
labs(title = 'Posterior density evaluated in grid', x = 'alpha', y = 'beta') +
scale_fill_gradient(low = 'yellow', high = 'red', guide = F) +
scale_alpha(range = c(0, 1), guide = F)
pos3
pri_den = apply(ab_grid, 1, function(z){dmvnorm(z, mean = c(0, 10), sigma = matrix(c(4, 10, 10, 100), ncol = 2), log = F)})
nsamp <- 1000
samp_indices <- sample(length(pri_den), size = nsamp,
replace = T, prob = pri_den/sum(pri_den))
samp_A <- ab_grid[samp_indices[1:nsamp], 1]
samp_B <- ab_grid[samp_indices[1:nsamp], 2]
samps <- data_frame(ind = 1:nsamp, alpha = samp_A, beta = samp_B) %>%
mutate(ld50 = - alpha/beta)
sam <- ggplot(data = samps) +
geom_point(aes(alpha, beta), color = 'blue') +
coord_cartesian(xlim = c(-4, 4), ylim = c(-10, 30)) +
labs(title = 'Prior draws', x = 'alpha', y = 'beta')
sam
pri_den = apply(ab_grid, 1, function(z){dmvnorm(z, mean = c(0, 10), sigma = matrix(c(4, 10, 10, 100), ncol = 2), log = F)})
nsamp <- 1000
samp_indices <- sample(length(pri_den), size = nsamp,
replace = T, prob = pri_den/sum(pri_den))
samp_A <- ab_grid[samp_indices[1:nsamp], 1]
samp_B <- ab_grid[samp_indices[1:nsamp], 2]
samps <- data_frame(ind = 1:nsamp, alpha = samp_A, beta = samp_B) %>%
mutate(ld50 = - alpha/beta)
sam1 <- ggplot(data = samps) +
geom_point(aes(alpha, beta), color = 'blue') +
coord_cartesian(xlim = c(-4, 4), ylim = c(-10, 30)) +
labs(title = 'Prior draws', x = 'alpha', y = 'beta')
sam1
pri <- ggplot(data = data.frame(ab_grid, pri_den), aes(x = ab_grid[, 1], y = ab_grid[, 2])) +
geom_raster(aes(fill = pri_den, alpha = pri_den), interpolate = T) +
geom_contour(aes(z = pri_den), colour = 'black', size = 0.2) +
coord_cartesian(xlim = c(-4, 4), ylim = c(-10, 30)) +
labs(title = 'Posterior density evaluated in grid', x = 'alpha', y = 'beta') +
scale_fill_gradient(low = 'yellow', high = 'red', guide = F) +
scale_alpha(range = c(0, 1), guide = F)
pri
S = 50
ab_grid = expand.grid(seq(-4, 4, length.out = S), seq(-10, 30, length.out = S))
post_den = apply(ab_grid, 1, function(z){
alpha = z[1]; beta = z[2]
likeli(x, y, n, alpha, beta)*dmvnorm(c(alpha, beta), mean = c(0, 10), sigma = matrix(c(4, 10, 10, 100), ncol = 2))
})
nsamp <- 1000
samp_indices <- sample(length(post_den), size = nsamp,
replace = T, prob = post_den/sum(post_den))
samp_A <- ab_grid[samp_indices[1:nsamp], 1]
samp_B <- ab_grid[samp_indices[1:nsamp], 2]
samps <- data_frame(ind = 1:nsamp, alpha = samp_A, beta = samp_B) %>%
mutate(ld50 = - alpha/beta)
sam2 <- ggplot(data = samps) +
geom_point(aes(alpha, beta), color = 'blue') +
coord_cartesian(xlim = c(-4, 4), ylim = c(-10, 30)) +
labs(title = 'Posterior draws', x = 'alpha', y = 'beta')
sam2
pos3 <- ggplot(data = data.frame(ab_grid, post_den), aes(x = ab_grid[, 1], y = ab_grid[, 2])) +
geom_raster(aes(fill = post_den, alpha = post_den), interpolate = T) +
geom_contour(aes(z = post_den), colour = 'black', size = 0.2) +
coord_cartesian(xlim = c(-4, 4), ylim = c(-10, 30)) +
labs(title = 'Posterior density evaluated in grid', x = 'alpha', y = 'beta') +
scale_fill_gradient(low = 'yellow', high = 'red', guide = F) +
scale_alpha(range = c(0, 1), guide = F)
qnorm(0.1)
其他（
qt(0.975, df = 48)
60+c(-1, 1)*qt(0.975, df = 48)*0.7293
rm(list = ls())
library(mvtnorm)
library(fields)
library(ggplot2)
dmvnorm(c(0, 10), mean = c(0, 10), sigma = matrix(c(4, 10, 10, 100), ncol = 2), log = F)
dmvnorm(c(0, 10), mean = c(0, 10), sigma = matrix(c(4, 10, 10, 100), ncol = 2), log = T)
sum(post_den[samp_B > 0])
dmvnorm(c(0, 10), mean = c(0, 10), sigma = matrix(c(4, 10, 10, 100), ncol = 2), log = T)
x = c(-0.86, -0.30, -0.05, 0.73)
n = c(5, 5, 5, 5)
y = c(0, 1, 3, 5)
alpha = 0; beta = 10
likeli = function(x, y, n, alpha, beta){
theta = 1/(1+exp(-(alpha+beta*x)))
return(prod((x^y)*(1-x)^(n-y)))
}
log(likeli(x, y, n, alpha, beta)*dmvnorm(c(alpha, beta), mean = c(0, 10), sigma = matrix(c(4, 10, 10, 100), ncol = 2)))
S = 50
ab_grid = expand.grid(seq(-4, 4, length.out = S), seq(-10, 30, length.out = S))
post_den = apply(ab_grid, 1, function(z){
alpha = z[1]; beta = z[2]
likeli(x, y, n, alpha, beta)*dmvnorm(c(alpha, beta), mean = c(0, 10), sigma = matrix(c(4, 10, 10, 100), ncol = 2))
})
pos1 <- ggplot(data = data.frame(ab_grid, post_den), aes(x = ab_grid[, 1], y = ab_grid[, 2])) +
geom_raster(aes(fill = post_den, alpha = post_den), interpolate = T) +
# geom_contour(aes(z = post_den), colour = 'black', size = 0.2) +
coord_cartesian(xlim = c(-4, 4), ylim = c(-10, 30)) +
labs(title = 'Posterior density evaluated in grid', x = 'alpha', y = 'beta') +
scale_fill_gradient(low = 'yellow', high = 'red', guide = F) +
scale_alpha(range = c(0, 1), guide = F)
pri_den = apply(ab_grid, 1, function(z){dmvnorm(z, mean = c(0, 10), sigma = matrix(c(4, 10, 10, 100), ncol = 2), log = F)})
nsamp <- 1000
samp_indices <- sample(length(pri_den), size = nsamp,
replace = T, prob = pri_den/sum(pri_den))
samp_A <- ab_grid[samp_indices[1:nsamp], 1]
samp_B <- ab_grid[samp_indices[1:nsamp], 2]
samps <- data_frame(ind = 1:nsamp, alpha = samp_A, beta = samp_B) %>%
mutate(ld50 = - alpha/beta)
sam1 <- ggplot(data = samps) +
geom_point(aes(alpha, beta), color = 'blue') +
coord_cartesian(xlim = c(-4, 4), ylim = c(-10, 30)) +
labs(title = 'Prior draws', x = 'alpha', y = 'beta')
sam1
pri <- ggplot(data = data.frame(ab_grid, pri_den), aes(x = ab_grid[, 1], y = ab_grid[, 2])) +
geom_raster(aes(fill = pri_den, alpha = pri_den), interpolate = T) +
geom_contour(aes(z = pri_den), colour = 'black', size = 0.2) +
coord_cartesian(xlim = c(-4, 4), ylim = c(-10, 30)) +
labs(title = 'Posterior density evaluated in grid', x = 'alpha', y = 'beta') +
scale_fill_gradient(low = 'yellow', high = 'red', guide = F) +
scale_alpha(range = c(0, 1), guide = F)
pri
S = 50
ab_grid = expand.grid(seq(-4, 4, length.out = S), seq(-10, 30, length.out = S))
post_den = apply(ab_grid, 1, function(z){
alpha = z[1]; beta = z[2]
likeli(x, y, n, alpha, beta)*dmvnorm(c(alpha, beta), mean = c(0, 10), sigma = matrix(c(4, 10, 10, 100), ncol = 2))
})
nsamp <- 1000
samp_indices <- sample(length(post_den), size = nsamp,
replace = T, prob = post_den/sum(post_den))
samp_A <- ab_grid[samp_indices[1:nsamp], 1]
samp_B <- ab_grid[samp_indices[1:nsamp], 2]
samps <- data_frame(ind = 1:nsamp, alpha = samp_A, beta = samp_B) %>%
mutate(ld50 = - alpha/beta)
sam2 <- ggplot(data = samps) +
geom_point(aes(alpha, beta), color = 'blue') +
coord_cartesian(xlim = c(-4, 4), ylim = c(-10, 30)) +
labs(title = 'Posterior draws', x = 'alpha', y = 'beta')
sam2
pos3 <- ggplot(data = data.frame(ab_grid, post_den), aes(x = ab_grid[, 1], y = ab_grid[, 2])) +
geom_raster(aes(fill = post_den, alpha = post_den), interpolate = T) +
geom_contour(aes(z = post_den), colour = 'black', size = 0.2) +
coord_cartesian(xlim = c(-4, 4), ylim = c(-10, 30)) +
labs(title = 'Posterior density evaluated in grid', x = 'alpha', y = 'beta') +
scale_fill_gradient(low = 'yellow', high = 'red', guide = F) +
scale_alpha(range = c(0, 1), guide = F)
sum(post_den[samp_B > 0])
sum(samp_B > 0)/length(samp_B > 0)
sum(post_den[samp_B > 0])
sum(samp_B > 0)/length(samp_B > 0)
sum(post_den[samp_B > 0])/sum(post_den)
sum(post_den[samp_B > 0])/sum(post_den)
sum(samp_B > 0)/length(samp_B > 0)
library(mvtnorm)
library(fields)
library(ggplot2)
dmvnorm(c(0, 10), mean = c(0, 10), sigma = matrix(c(4, 10, 10, 100), ncol = 2), log = T)
x = c(-0.86, -0.30, -0.05, 0.73)
n = c(5, 5, 5, 5)
y = c(0, 1, 3, 5)
alpha = 0; beta = 10
likeli = function(x, y, n, alpha, beta){
theta = 1/(1+exp(-(alpha+beta*x)))
return(prod((x^y)*(1-x)^(n-y)))
}
log(likeli(x, y, n, alpha, beta)*dmvnorm(c(alpha, beta), mean = c(0, 10), sigma = matrix(c(4, 10, 10, 100), ncol = 2)))
S = 50
ab_grid = expand.grid(seq(-4, 4, length.out = S), seq(-10, 30, length.out = S))
post_den = apply(ab_grid, 1, function(z){
alpha = z[1]; beta = z[2]
likeli(x, y, n, alpha, beta)*dmvnorm(c(alpha, beta), mean = c(0, 10), sigma = matrix(c(4, 10, 10, 100), ncol = 2))
})
pos1 <- ggplot(data = data.frame(ab_grid, post_den), aes(x = ab_grid[, 1], y = ab_grid[, 2])) +
geom_raster(aes(fill = post_den, alpha = post_den), interpolate = T) +
# geom_contour(aes(z = post_den), colour = 'black', size = 0.2) +
coord_cartesian(xlim = c(-4, 4), ylim = c(-10, 30)) +
labs(title = 'Posterior density evaluated in grid', x = 'alpha', y = 'beta') +
scale_fill_gradient(low = 'yellow', high = 'red', guide = F) +
scale_alpha(range = c(0, 1), guide = F)
pri_den = apply(ab_grid, 1, function(z){dmvnorm(z, mean = c(0, 10), sigma = matrix(c(4, 10, 10, 100), ncol = 2), log = F)})
nsamp <- 1000
samp_indices <- sample(length(pri_den), size = nsamp,
replace = T, prob = pri_den/sum(pri_den))
samp_A <- ab_grid[samp_indices[1:nsamp], 1]
samp_B <- ab_grid[samp_indices[1:nsamp], 2]
samps <- data_frame(ind = 1:nsamp, alpha = samp_A, beta = samp_B) %>%
mutate(ld50 = - alpha/beta)
sam1 <- ggplot(data = samps) +
geom_point(aes(alpha, beta), color = 'blue') +
coord_cartesian(xlim = c(-4, 4), ylim = c(-10, 30)) +
labs(title = 'Prior draws', x = 'alpha', y = 'beta')
sam1
pri <- ggplot(data = data.frame(ab_grid, pri_den), aes(x = ab_grid[, 1], y = ab_grid[, 2])) +
geom_raster(aes(fill = pri_den, alpha = pri_den), interpolate = T) +
geom_contour(aes(z = pri_den), colour = 'black', size = 0.2) +
coord_cartesian(xlim = c(-4, 4), ylim = c(-10, 30)) +
labs(title = 'Posterior density evaluated in grid', x = 'alpha', y = 'beta') +
scale_fill_gradient(low = 'yellow', high = 'red', guide = F) +
scale_alpha(range = c(0, 1), guide = F)
pri
S = 50
ab_grid = expand.grid(seq(-4, 4, length.out = S), seq(-10, 30, length.out = S))
post_den = apply(ab_grid, 1, function(z){
alpha = z[1]; beta = z[2]
likeli(x, y, n, alpha, beta)*dmvnorm(c(alpha, beta), mean = c(0, 10), sigma = matrix(c(4, 10, 10, 100), ncol = 2))
})
nsamp <- 1000
samp_indices <- sample(length(post_den), size = nsamp,
replace = T, prob = post_den/sum(post_den))
samp_A <- ab_grid[samp_indices[1:nsamp], 1]
samp_B <- ab_grid[samp_indices[1:nsamp], 2]
samps <- data_frame(ind = 1:nsamp, alpha = samp_A, beta = samp_B) %>%
mutate(ld50 = - alpha/beta)
sam2 <- ggplot(data = samps) +
geom_point(aes(alpha, beta), color = 'blue') +
coord_cartesian(xlim = c(-4, 4), ylim = c(-10, 30)) +
labs(title = 'Posterior draws', x = 'alpha', y = 'beta')
sam2
pos3 <- ggplot(data = data.frame(ab_grid, post_den), aes(x = ab_grid[, 1], y = ab_grid[, 2])) +
geom_raster(aes(fill = post_den, alpha = post_den), interpolate = T) +
geom_contour(aes(z = post_den), colour = 'black', size = 0.2) +
coord_cartesian(xlim = c(-4, 4), ylim = c(-10, 30)) +
labs(title = 'Posterior density evaluated in grid', x = 'alpha', y = 'beta') +
scale_fill_gradient(low = 'yellow', high = 'red', guide = F) +
scale_alpha(range = c(0, 1), guide = F)
sum(post_den[samp_B > 0])/sum(post_den)
sum(samp_B > 0)/length(samp_B > 0)
sum(post_den[samp_B > 0])/sum(post_den)
sum(samp_B > 0)/length(samp_B > 0)
sum(post_den[samp_B > 0])/sum(post_den)
sum(samp_B > 0)/length(samp_B > 0)
sum(post_den[samp_B > 0])/sum(post_den)
sum(samp_B > 0)/length(samp_B > 0)
dmvnorm(c(0, 10), mean = c(0, 10), sigma = matrix(c(4, 10, 10, 100), ncol = 2), log = T)
x = c(-0.86, -0.30, -0.05, 0.73)
n = c(5, 5, 5, 5)
y = c(0, 1, 3, 5)
alpha = 0; beta = 10
likeli = function(x, y, n, alpha, beta){
theta = 1/(1+exp(-(alpha+beta*x)))
return(prod((x^y)*(1-x)^(n-y)))
}
log(likeli(x, y, n, alpha, beta)*dmvnorm(c(alpha, beta), mean = c(0, 10), sigma = matrix(c(4, 10, 10, 100), ncol = 2)))
S = 50
ab_grid = expand.grid(seq(-4, 4, length.out = S), seq(-10, 30, length.out = S))
post_den = apply(ab_grid, 1, function(z){
alpha = z[1]; beta = z[2]
likeli(x, y, n, alpha, beta)*dmvnorm(c(alpha, beta), mean = c(0, 10), sigma = matrix(c(4, 10, 10, 100), ncol = 2))
})
pos1 <- ggplot(data = data.frame(ab_grid, post_den), aes(x = ab_grid[, 1], y = ab_grid[, 2])) +
geom_raster(aes(fill = post_den, alpha = post_den), interpolate = T) +
# geom_contour(aes(z = post_den), colour = 'black', size = 0.2) +
coord_cartesian(xlim = c(-4, 4), ylim = c(-10, 30)) +
labs(title = 'Posterior density evaluated in grid', x = 'alpha', y = 'beta') +
scale_fill_gradient(low = 'yellow', high = 'red', guide = F) +
scale_alpha(range = c(0, 1), guide = F)
pri_den = apply(ab_grid, 1, function(z){dmvnorm(z, mean = c(0, 10), sigma = matrix(c(4, 10, 10, 100), ncol = 2), log = F)})
nsamp <- 1000
samp_indices <- sample(length(pri_den), size = nsamp,
replace = T, prob = pri_den/sum(pri_den))
samp_A <- ab_grid[samp_indices[1:nsamp], 1]
samp_B <- ab_grid[samp_indices[1:nsamp], 2]
samps <- data_frame(ind = 1:nsamp, alpha = samp_A, beta = samp_B) %>%
mutate(ld50 = - alpha/beta)
sam1 <- ggplot(data = samps) +
geom_point(aes(alpha, beta), color = 'blue') +
coord_cartesian(xlim = c(-4, 4), ylim = c(-10, 30)) +
labs(title = 'Prior draws', x = 'alpha', y = 'beta')
pri <- ggplot(data = data.frame(ab_grid, pri_den), aes(x = ab_grid[, 1], y = ab_grid[, 2])) +
geom_raster(aes(fill = pri_den, alpha = pri_den), interpolate = T) +
geom_contour(aes(z = pri_den), colour = 'black', size = 0.2) +
coord_cartesian(xlim = c(-4, 4), ylim = c(-10, 30)) +
labs(title = 'Posterior density evaluated in grid', x = 'alpha', y = 'beta') +
scale_fill_gradient(low = 'yellow', high = 'red', guide = F) +
scale_alpha(range = c(0, 1), guide = F)
grid.arrange(pri, sam1, nrow = 2)
pri_den = apply(ab_grid, 1, function(z){dmvnorm(z, mean = c(0, 10), sigma = matrix(c(4, 10, 10, 100), ncol = 2), log = F)})
nsamp <- 1000
samp_indices <- sample(length(pri_den), size = nsamp,
replace = T, prob = pri_den/sum(pri_den))
samp_A <- ab_grid[samp_indices[1:nsamp], 1]
samp_B <- ab_grid[samp_indices[1:nsamp], 2]
samps <- data_frame(ind = 1:nsamp, alpha = samp_A, beta = samp_B) %>%
mutate(ld50 = - alpha/beta)
sam1 <- ggplot(data = samps) +
geom_point(aes(alpha, beta), color = 'blue') +
coord_cartesian(xlim = c(-4, 4), ylim = c(-10, 30)) +
labs(title = 'Prior draws', x = 'alpha', y = 'beta')
pri <- ggplot(data = data.frame(ab_grid, pri_den), aes(x = ab_grid[, 1], y = ab_grid[, 2])) +
geom_raster(aes(fill = pri_den, alpha = pri_den), interpolate = T) +
geom_contour(aes(z = pri_den), colour = 'black', size = 0.2) +
coord_cartesian(xlim = c(-4, 4), ylim = c(-10, 30)) +
labs(title = 'Posterior density evaluated in grid', x = 'alpha', y = 'beta') +
scale_fill_gradient(low = 'yellow', high = 'red', guide = F) +
scale_alpha(range = c(0, 1), guide = F)
grid.arrange(pri, sam1, nrow = 2)
pri_den = apply(ab_grid, 1, function(z){dmvnorm(z, mean = c(0, 10), sigma = matrix(c(4, 10, 10, 100), ncol = 2), log = F)})
nsamp <- 1000
rm(list = ls())
ab_grid
dmvnorm(c(0, 10), mean = c(0, 10), sigma = matrix(c(4, 10, 10, 100), ncol = 2), log = T)
x = c(-0.86, -0.30, -0.05, 0.73)
n = c(5, 5, 5, 5)
y = c(0, 1, 3, 5)
alpha = 0; beta = 10
likeli = function(x, y, n, alpha, beta){
theta = 1/(1+exp(-(alpha+beta*x)))
return(prod((x^y)*(1-x)^(n-y)))
}
log(likeli(x, y, n, alpha, beta)*dmvnorm(c(alpha, beta), mean = c(0, 10), sigma = matrix(c(4, 10, 10, 100), ncol = 2)))
S = 50
ab_grid = expand.grid(seq(-4, 4, length.out = S), seq(-10, 30, length.out = S))
post_den = apply(ab_grid, 1, function(z){
alpha = z[1]; beta = z[2]
likeli(x, y, n, alpha, beta)*dmvnorm(c(alpha, beta), mean = c(0, 10), sigma = matrix(c(4, 10, 10, 100), ncol = 2))
})
pos1 <- ggplot(data = data.frame(ab_grid, post_den), aes(x = ab_grid[, 1], y = ab_grid[, 2])) +
geom_raster(aes(fill = post_den, alpha = post_den), interpolate = T) +
# geom_contour(aes(z = post_den), colour = 'black', size = 0.2) +
coord_cartesian(xlim = c(-4, 4), ylim = c(-10, 30)) +
labs(title = 'Posterior density evaluated in grid', x = 'alpha', y = 'beta') +
scale_fill_gradient(low = 'yellow', high = 'red', guide = F) +
scale_alpha(range = c(0, 1), guide = F)
ab_grid
pri_den = apply(ab_grid, 1, function(z){dmvnorm(z, mean = c(0, 10), sigma = matrix(c(4, 10, 10, 100), ncol = 2), log = F)})
nsamp <- 1000
samp_indices <- sample(length(pri_den), size = nsamp,
replace = T, prob = pri_den/sum(pri_den))
samp_A <- ab_grid[samp_indices[1:nsamp], 1]
samp_B <- ab_grid[samp_indices[1:nsamp], 2]
samps <- data_frame(ind = 1:nsamp, alpha = samp_A, beta = samp_B) %>%
mutate(ld50 = - alpha/beta)
sam1 <- ggplot(data = samps) +
geom_point(aes(alpha, beta), color = 'blue') +
coord_cartesian(xlim = c(-4, 4), ylim = c(-10, 30)) +
labs(title = 'Prior draws', x = 'alpha', y = 'beta')
pri <- ggplot(data = data.frame(ab_grid, pri_den), aes(x = ab_grid[, 1], y = ab_grid[, 2])) +
geom_raster(aes(fill = pri_den, alpha = pri_den), interpolate = T) +
geom_contour(aes(z = pri_den), colour = 'black', size = 0.2) +
coord_cartesian(xlim = c(-4, 4), ylim = c(-10, 30)) +
labs(title = 'Posterior density evaluated in grid', x = 'alpha', y = 'beta') +
scale_fill_gradient(low = 'yellow', high = 'red', guide = F) +
scale_alpha(range = c(0, 1), guide = F)
grid.arrange(pri, sam1, nrow = 2)
library(mvtnorm)
library(fields)
library(ggplot2)
dmvnorm(c(0, 10), mean = c(0, 10), sigma = matrix(c(4, 10, 10, 100), ncol = 2), log = T)
x = c(-0.86, -0.30, -0.05, 0.73)
n = c(5, 5, 5, 5)
y = c(0, 1, 3, 5)
alpha = 0; beta = 10
likeli = function(x, y, n, alpha, beta){
theta = 1/(1+exp(-(alpha+beta*x)))
return(prod((x^y)*(1-x)^(n-y)))
}
log(likeli(x, y, n, alpha, beta)*dmvnorm(c(alpha, beta), mean = c(0, 10), sigma = matrix(c(4, 10, 10, 100), ncol = 2)))
S = 50
ab_grid = expand.grid(seq(-4, 4, length.out = S), seq(-10, 30, length.out = S))
ab_grid
post_den = apply(ab_grid, 1, function(z){
alpha = z[1]; beta = z[2]
likeli(x, y, n, alpha, beta)*dmvnorm(c(alpha, beta), mean = c(0, 10), sigma = matrix(c(4, 10, 10, 100), ncol = 2))
})
pos1 <- ggplot(data = data.frame(ab_grid, post_den), aes(x = ab_grid[, 1], y = ab_grid[, 2])) +
geom_raster(aes(fill = post_den, alpha = post_den), interpolate = T) +
# geom_contour(aes(z = post_den), colour = 'black', size = 0.2) +
coord_cartesian(xlim = c(-4, 4), ylim = c(-10, 30)) +
labs(title = 'Posterior density evaluated in grid', x = 'alpha', y = 'beta') +
scale_fill_gradient(low = 'yellow', high = 'red', guide = F) +
scale_alpha(range = c(0, 1), guide = F)
pos1
pos1 <- ggplot(data = data.frame(ab_grid, post_den), aes(x = ab_grid[, 1], y = ab_grid[, 2])) +
geom_raster(aes(fill = post_den, alpha = post_den), interpolate = T) +
geom_contour(aes(z = post_den), colour = 'black', size = 0.2) +
coord_cartesian(xlim = c(-4, 4), ylim = c(-10, 30)) +
labs(title = 'Posterior density evaluated in grid', x = 'alpha', y = 'beta') +
scale_fill_gradient(low = 'yellow', high = 'red', guide = F) +
scale_alpha(range = c(0, 1), guide = F)
pos1
pri_den = apply(ab_grid, 1, function(z){dmvnorm(z, mean = c(0, 10), sigma = matrix(c(4, 10, 10, 100), ncol = 2), log = F)})
?grid.arrange
dbinom(9, 20, 0.3)
?dbinorm
?dbinom
pbinom(20, 20, 0.3)-pbinom(10, 20, 0.3)
pbinom(10, 20, 0.3)
pbinom(20, 20, 0.3)-pbinom(10, 20, 0.3)+0.308
pbinom(20, 20, 0.3)-pbinom(10, 20, 0.3)+0.308*dbinom(9, 20, 0.3)
dbinom(9, 20, 0.3)*0.308
pbinom(20, 20, 0.3)-pbinom(9, 20, 0.3)
dbinom(seq(10, 20, by = 1), 20, 0.3)
sum(dbinom(seq(10, 20, by = 1), 20, 0.3))
0.05-sum(dbinom(seq(10, 20, by = 1), 20, 0.3))
0.002038103/dbinom(9, 20, 0.3)
rm(list = ls())
library(tidyverse); library(factoextra); library(cluster); library(MASS);
library(olsrr);library(Hmisc);library(car); library(gvlma); library(leaps);
library(glmnet); library(e1071); library(EnvStats)
############################ Kmeans ############################
load("data_final.RData")
y =  data[, 1]; X = as.matrix(data[, -1])
colnames(X) = c("A", "B", "C", "D", "E", "F")
fviz_nbclust(X, kmeans, method = "wss")
fviz_nbclust(X, kmeans, method = "silhouette")
# So we let k = 2
clu.obj = kmeans(X, centers = 2)
y1 = y[clu.obj$cluster == 1]
X1 = X[clu.obj$cluster == 1, ]
y2 = y[clu.obj$cluster == 2]
X2 = X[clu.obj$cluster == 2, ]
fit1 = lm(y1~X1)
fit2 = lm(y2~X2)
par(mfrow = c(2,2))
plot(fit1)
par(mfrow = c(2,2))
plot(fit2)
summary(fit2)
pwer = -1.5
X1_trsfom = bcnPower(X1, lambda = rep(pwer, 6), gamma = c(1, 1, 5, 6, 6, 4))
y1_trsfom = bcnPower(y1, lambda = pwer, gamma = 0.5)
fit1 = lm(y1_trsfom~X1_trsfom)
summary(fit1)
cv_lasso = cv.glmnet(X1_trsfom, y1_trsfom)
lasso_coef = coef(cv_lasso, s = "lambda.min")
X1_trsfom = X1_trsfom[, as.vector(lasso_coef)[-1] != 0]
fit1 = lm(y1_trsfom~X1_trsfom)
summary(fit1)
par(mfrow = c(2,2))
plot(fit1)
gvlma(fit1)
setwd("~/Documents/GitHub/STAT-482-DASH")
load("data_final.RData")
y =  data[, 1]; X = as.matrix(data[, -1])
colnames(X) = c("A", "B", "C", "D", "E", "F")
fviz_nbclust(X, kmeans, method = "wss")
fviz_nbclust(X, kmeans, method = "silhouette")
# So we let k = 2
clu.obj = kmeans(X, centers = 2)
y1 = y[clu.obj$cluster == 1]
X1 = X[clu.obj$cluster == 1, ]
y2 = y[clu.obj$cluster == 2]
X2 = X[clu.obj$cluster == 2, ]
fit1 = lm(y1~X1)
fit2 = lm(y2~X2)
par(mfrow = c(2,2))
plot(fit1)
par(mfrow = c(2,2))
plot(fit2)
summary(fit2)
pwer = -1.5
X1_trsfom = bcnPower(X1, lambda = rep(pwer, 6), gamma = c(1, 1, 5, 6, 6, 4))
y1_trsfom = bcnPower(y1, lambda = pwer, gamma = 0.5)
fit1 = lm(y1_trsfom~X1_trsfom)
summary(fit1)
cv_lasso = cv.glmnet(X1_trsfom, y1_trsfom)
lasso_coef = coef(cv_lasso, s = "lambda.min")
X1_trsfom = X1_trsfom[, as.vector(lasso_coef)[-1] != 0]
fit1 = lm(y1_trsfom~X1_trsfom)
summary(fit1)
par(mfrow = c(2,2))
plot(fit1)
gvlma(fit1)
shapiro.test(residuals(fit1))
cv_lasso = cv.glmnet(X1_trsfom, y1_trsfom)
lasso_coef = coef(cv_lasso, s = "lambda.min")
X1_trsfom = X1_trsfom[, as.vector(lasso_coef)[-1] != 0]
fit1 = lm(y1_trsfom~X1_trsfom)
summary(fit1)
par(mfrow = c(2,2))
plot(fit1)
gvlma(fit1)
pwer = -1
X1_trsfom = bcnPower(X1, lambda = rep(pwer, 6), gamma = c(1, 1, 5, 6, 6, 4))
y1_trsfom = bcnPower(y1, lambda = pwer, gamma = 0.5)
fit1 = lm(y1_trsfom~X1_trsfom)
summary(fit1)
shapiro.test(residuals(fit1))
plot(fit1)
shapiro.test(residuals(fit1))
