library(factoextra)
set.seed(101)
indexing <- createDataPartition(y = data$y, p = 0.75,list = FALSE)
data_train = data[indexing,]
data_test = data[-indexing,]
knn_fit = train(y~.,
data = data_train,
trControl = trainControl(method = 'repeatedcv', number = 10, repeats = 3),
method = 'knn',
tuneLength = 10
)
knn_pred = predict(knn_fit, newdata = data_test)
knn_RMSE = sqrt(mean((data_test$y - knn_pred)^2))
knitr::opts_chunk$set(echo = TRUE)
library(glmnet)
library(caret)
library(BART)
library(stats)
library(mclust)
library(factoextra)
{
rm(list=ls())
setwd("/Users/dougl/Downloads/finalResult")
load(file = 'data.Rdata')
pred2018 = read.csv(file = "pred2018.csv")
pred2014 = read.csv(file = "pred2014.csv")
load(file = 'logOdds_dem2014.Rdata')
}
set.seed(101)
indexing <- createDataPartition(y = data$y, p = 0.75,list = FALSE)
data_train = data[indexing,]
data_test = data[-indexing,]
knn_fit = train(y~.,
data = data_train,
trControl = trainControl(method = 'repeatedcv', number = 10, repeats = 3),
method = 'knn',
tuneLength = 10
)
knn_pred = predict(knn_fit, newdata = data_test)
knn_RMSE = sqrt(mean((data_test$y - knn_pred)^2))
rf_fit = train(y~.,
data = data_train,
trControl = trainControl(method = 'repeatedcv', number = 10, repeats = 3),
method = 'rf',
tuneLength = 5
)
rf_pred = predict(rf_fit, newdata = data_test)
rf_RMSE = sqrt(mean((data_test$y - rf_pred)^2))
boost.fit <- train(y ~ .,
data = data_train,
method = "gbm",
trControl = trainControl(method = 'repeatedcv', number = 10, repeats = 3),
verbose = FALSE,
tuneLength = 10
)
boost_pred = predict(boost.fit, newdata = data_test)
boost_RMSE = sqrt(mean((data_test$y - boost_pred)^2))
bart_fit = gbart(x.train = data_train[,-1], y.train = data_train$y, type = 'wbart')
bart_pred = predict(bart_fit, newdata = data_test[,-1])
pred.mean=apply(bart_pred,2,mean)
bart_RMSE = sqrt(mean((data_test$y - pred.mean)^2))
RMSE = cbind(knn_RMSE, rf_RMSE, boost_RMSE, bart_RMSE)
RMSE
library(stats)
vote_pred[1:10,]
pred = predict(boost.fit, newdata = data_pred)
data2018 = pred2018[,c(-1,-2,-3)]
data2014 = pred2014[,c(-1,-2,-3)]
for (i in 1:ncol(data2018)){
data2018[,i] = as.numeric(data2018[,i])
}
data2018 = apply(data2018, 2, scale)
data2014 = apply(data2014, 2, scale)
data_pred = data2018 - data2014
colnames(data_pred) = colnames(data)[-1]
pred = predict(boost.fit, newdata = data_pred)
logOdds_dem2018 = pred + logOdds_dem2014
prob2018 = exp(logOdds_dem2018) / (1+exp(logOdds_dem2018))
aa = c()
for (i in 1:length(prob2018)){
if (prob2018[i] > 0.5){
aa[i] = 0
}
else
aa[i] = 1
}
# 0 for dem and 1 for gop
vote_pred = data.frame(County = pred2018[,2], State = pred2018[,3], pred = aa)
vote_pred[1:10,]
save(vote_pred, "vote_pred.csv")
save("vote_pred", vote_pred.csv)
write.csv(vote_pred, "vote_pred.csv")
vote_pred[1:10,]
# data description
There are total 61 covariates and 850 counties from Swing States, which are Colorado, Florida, Iowa, Michigan, Minnesota, Nevada, New Hampshire, North Carolina, Ohio, Pennsylvania, Virginia, and Wisconsin. For variable selection, Lasso regression is conducted with largest value of lambda such that error is within 1 standard error of the minimum. As a result, 11 variables are selected. Log odds ratio, $log(\frac{p(x)}{1-p(x)})$ for the response variable is used for non-parametric regression and 11 covariates are standardized.
# Lasso Regression
Lasso regression is a type of linear regression that uses shrinkage using L1 Regularization. This particular type of regression is well-suited for models showing high levels of muticollinearity or when you want to automate certain parts of model selection, like variable selection/parameter elimination. The goal of the lasso algorithm is to minimize the quantity,
$$(\sum_{i=1}^{n} y_i - \beta_0 - \sum_{j=1}^{p} \beta_jx_{ij})^2 + \lambda\sum_{j=1}^{p}=|\beta_j| = RSS + \lambda||\beta||_1 $$
library(rethinking)
data(reedfrogs)
d <- reedfrogs
str(d)
d$tank <- 1:nrow(d)
dat <- list(
S = d$surv,
N = d$density,
tank = d$tank
)
dat
library(rethinking)
data(reedfrogs)
d <- reedfrogs
str(d)
dat <- list(
S = d$surv,
N = d$density,
tank = d$tank
)
dat
m13.1 <- ulam(
alist(
S ~ dbinom(N, p),
logit(p) <- a[tank],
a[tank] ~ dnorm(0, 1.5)),
data = dat,
chains = 4,
log_lik = TRUE
)
1e4
X_sim <- matrix(NA, nrow = 1e4, ncol = 500)
X_sim
X_sim <- apply(X_sim, 2, rnorm(1))
X_sim <- matrix(rnorm(1e4*500, mean = 100, sd = 10), nrow = 1e4, ncol = 500)
X_sim <- matrix(rnorm(1e4*500, mean = 100, sd = 10), nrow = 1e4, ncol = 500)
X_sim
cor(X_sim)
corMatrix(X_sim)
install.packages("corrplot")
library(corrplot)
corrplot(X_sim)
corrplot(corr(X_sim))
corrplot(cor(X_sim))
cor(X_sim)
cor(X_sim)[1]
cor(X_sim)[1, ]
plot(coecor(X_sim)[1, ])
plot(cor(X_sim)[1, ])
plot(cor(X_sim)[1, ], type = 'l')
plot(type = 'l')
apply(1:500, 1, function(x) lines(cor(X_sim)[x, ]))
apply(1:500, 2, function(x) lines(cor(X_sim)[x, ]))
apply(1:500, function(x) lines(cor(X_sim)[x, ]))
apply(1:500, 1, function(x) lines(cor(X_sim)[x, ]))
apply(1:500, 1, function(x) lines(cor(X_sim)[1e4, ]))
apply(1:1e4, 1, function(x) lines(cor(X_sim)[x, ]))
plot(type = 'l')
plot(x = 1:1e4, y = NA, type = 'l')
plot(x = 1:1e4, y = NA, type = 'l')
apply(1:1e4, function(x) lines(cor(X_sim)[x, ]))
apply(1:1e4, FUN = function(x) lines(cor(X_sim)[x, ]))
sapply(1:1e4, FUN = function(x) lines(cor(X_sim)[x, ]))
plot(x = 1:1e4, y = NA, type = 'l')
plot(x = 1:1e4, type = 'l')
sapply(1:1e4, FUN = function(x) lines(cor(X_sim)[x, ]))
plot(type = 'l')
plot.new()
sapply(1:1e4, FUN = function(x) lines(cor(X_sim)[x, ]))
X_sim_cor <- cor(X_sim)
dim(X_sim_cor)
X_sim_cor <- cor(X_sim)
plot.new()
sapply(1:1e4, FUN = function(x) lines(X_sim_cor[x, ]))
plot.new()
sapply(1:500, FUN = function(x) lines(X_sim_cor[x, ]))
X_sim_cor[1,]
lapply(1:500, FUN = function(x) lines(X_sim_cor[x, ]))
X_sim_cor <- cor(X_sim)
plot.new()
lapply(1:500, FUN = function(x) lines(X_sim_cor[x, ]))
plot.new()
for(ii in 1:500) lines(X_sim_cor[ii, ]))
for(ii in 1:500) lines(X_sim_cor[ii, ])
plot.new()
for(ii in 1:500) lines(X_sim_cor[ii, ])
plot.new(x = c(0, 500), y = c(0,1))
plot(x = c(0, 500), y = c(0,1))
plot(x = c(0, 500), y = c(0,1))
for(ii in 1:500) lines(X_sim_cor[ii, ])
X_sim_cor <- cor(X_sim)
plot(x = c(0, 500), y = c(0,1))
for(ii in 1:500) lines(X_sim_cor[ii, ])
plot(x = c(0, 500), y = c(0,1))
for(ii in 1:500) lines(X_sim_cor[ii, ])
plot.new()
for(ii in 1:500) lines(X_sim_cor[ii, ])
curve(seq(1, 15, length.out = 1e4), dbinom(size = 5)
plot.new()
#plot.new()
curve(seq(1, 15, length.out = 1e4), dbinom(size = 5))
#plot.new()
curve(seq(1, 15, length.out = 1e4), dbinom(x, size = 5))
#plot.new()
curve(seq(1, 15, length.out = 1e4), dbinom(seq(1, 15, length.out = 1e4), size = 5))
#plot.new()
curve(seq(1, 15, length.out = 1e4), dbinom(x = seq(1, 15, length.out = 1e4), size = 5))
pbinom(3, size = 14)
pbinom(3, size = 14, prob = .5)
pbinom(3, size = 14, prob = .5)
pbinom(3, size = 14, prob = .7)
pbinom(3, size = 14, prob = 1/14)
x <- pbinom(1:14, size = 14, prob = 1/14)
plot(x)
x <- pbinom(5, size = 14, prob = 1/14)
plot(x)
x <- pbinom(1:5, size = 14, prob = 1/14)
plot(x)
rm(list = ls())
choose(3, 15)
choose(15, 3)
choose(15, 3)
choose(15, 11)/choose(15, 3)
choose(15, 3)/choose(15, 11)
choose(15, 3)/choose(15, 12)
choose(15, 3)/choose(15, 14)
choose(15, 3)/choose(15, 10)
choose(15, 3)/choose(15, 19)
choose(15, 3)/choose(15, 1)
factorial(15)
choose(15, 1:15)
plot(choose(15, 1:15))
```{r, fig.asp=1/2}
plot(choose(15, 1:15))
plot(choose(15, 1:15), type = 'l)
plot(choose(15, 1:15), type = 'l')
plot(choose(15, 1:15), type = 'l')
455/.95
455*.95
plot(choose(14, 1:14), type = 'l')
plot(cumsum(choose(14, 1:14)), type = 'l')
plot(cumsum(choose(14, 1:14))/ sum(choose(14, 1:14)), type = 'l')
plot(cumsum(choose(14, 1:14))/ sum(choose(14, 1:14)), type = 'l')
plot(cumsum(choose(14, 1:14))/ sum(choose(14, 1:14)), type = 'l')
vline(x = .8)
line(x = .8)
plot(cumsum(choose(14, 1:14))/ sum(choose(14, 1:14)), type = 'l')
line(x = .8)
plot(cbinom(1:14, size = 14, prob = 1/14))
plot(pbinom(1:14, size = 14, prob = 1/14))
plot(pbinom(1:14, size = 14, prob = 1/14), type = 'l')
plot(cumsum(choose(14, 1:14))/ sum(choose(14, 1:14)), type = 'l')
plot(cumsum(choose(14, 1:14))/ sum(choose(14, 1:14)), type = 'l')
plot(cumsum(choose(14, 1:14))/ sum(choose(14, 1:14)), type = 'l')
plot(cumsum(choose(14, 1:14))/ sum(choose(14, 1:14)), type = 'l')
plot.new()
for(ii in 1:500) lines(X_sim_cor[1, ])
lines(X_sim_cor[1, ])#for(ii in 1:500)
X_sim <- matrix(rnorm(1e4*500, mean = 100, sd = 10), nrow = 1e4, ncol = 500)
X_sim_cor <- cor(X_sim)
plot.new()
lines(X_sim_cor[1, ])#for(ii in 1:500)
plot(X_sim_cor[1, ])
X_sim_cor <- cor(X_sim)
#plot.new()
plot(X_sim_cor[1, ])#for(ii in 1:500)
plot.new()
for(ii in 1:500) plot(X_sim_cor[ii, ], type = 'l' )
plot.new()
for(ii in 1:500) points(X_sim_cor[ii, ], type = 'l' )
Sys.info()
R.info()
R.Version()
install.packages("updateR")
rm(list = ls())
install.packages("updateR")
X_sim <- matrix(rnorm(1e2*50, mean = 100, sd = 10), nrow = 1e3, ncol = 50)
View(X_sim)
pga < -read.csv("https://gattonweb.uky.edu/sheather/book/docs/datasets/pgatour2006.csv")
pga < -read.csv("https://gattonweb.uky.edu/sheather/book/docs/datasets/pgatour2006.csv")
pga <- read.csv("https://gattonweb.uky.edu/sheather/book/docs/datasets/pgatour2006.csv")
head(pga)
summary(pga)
apply(pga, 2, summary)
summary(pga)
pga_nms <- names(pga)
pga_nms
pga_predictors <- names[2:12]
pga_predictors <- pga_nms[2:12]
unlist(pga_predictors)
#unlist(pga_predictors)
sapply(unlist(pga_predictors), `length<-`, 3)
#unlist(pga_predictors)
sapply(unlist(pga_predictors), `length<-`, 11)
combn(pga_predictors)
combn(pga_predictors, 11)
combn(pga_predictors, 2)
lapply(unlist(pga_predictors), combn, 1:11)
lapply(1:11, unlist(pga_predictors), combn)
unlist(lapply(1:3, combn, x = cpga_predictors , simplify = FALSE), recursive = FALSE)
unlist(lapply(1:3, combn, x = pga_predictors , simplify = FALSE), recursive = FALSE)
pga_combin <- unlist(lapply(1:11, combn, x = pga_predictors , simplify = FALSE), recursive = FALSE)
View(pga_combin)
?lm.fit
lm.fit(x = c(1, 2, 3), y = c(1 , 1, 4) )
lm.fit(x = matrix(1, 2, 3), y = c(1 , 1, 4) )
lm.fit(x = matrix(c(1, 2, 3)), y = c(1 , 1, 4) )
plot(c(1, 2, 3), c(1 , 1, 4) )
abline(lm.fit(x = matrix(c(1, 2, 3)), y = c(1 , 1, 4))$coefficient)
plot(c(1, 2, 3), c(1 , 1, 4) )
abline(b = lm.fit(x = matrix(c(1, 2, 3)), y = c(1 , 1, 4))$coefficient)
lm.fit(x = matrix(c(1, 2, 3)), y = c(1 , 1, 4))$coefficient
plot(c(1, 2, 3), c(1 , 1, 4) )
abline(a = lm.fit(x = matrix(c(1, 2, 3)), y = c(1 , 1, 4))$coefficient)
plot(c(1, 2, 3), c(1 , 1, 4) )
abline(lm.fit(x = matrix(c(1, 2, 3)), y = c(1 , 1, 4))$coefficient)
theta <- seq(0, 1, by = 0.1)
plot.new()
for(ii in seq_along(theta)){
curve(dbinom(57, 100, prob = theta[ii]))
}
plot.new()
for(ii in seq_along(theta)){
curve(dbinom(57, 100, prob = theta[ii]))
}
for(ii in seq_along(theta)){
curve(dbinom(1:100, 100, prob = theta[ii]))
}
plot.new()
for(ii in seq_along(theta)){
curve(dbinom(1:100, 100, prob = theta[ii]))
}
?dbinom
for(ii in seq_along(theta)){
lines(dbinom(57, 100, prob = theta[ii]))
}
plot.new()
for(ii in seq_along(theta)){
lines(dbinom(57, 100, prob = theta[ii]))
}
?dbinom
plot.new()
for(ii in seq_along(theta)){
lines(dbinom(57, 100, prob = theta[ii]))
}
plot.new()
for(ii in seq_along(theta)){
lines(dbinom(1:100, 100, prob = theta[ii]))
}
x <- seq(0, 100, length.out = 1e4)
plot(x)
x <- seq(0, 100, length.out = 1e4)
plot.new()
for(ii in seq_along(theta)){
lines(x, dbinom(1:100, 100, prob = theta[ii]))
}
x <- seq(0, 100, length.out = 1e4)
plot.new()
for(ii in seq_along(theta)){
lines(x, dbinom(x, 100, prob = theta[ii]))
}
x <- seq(0, 100, length.out = 1e4)
plot.new()
for(ii in seq_along(theta)){
curve(dbinom(x, 100, prob = theta[ii]))
}
x <- seq(0, 100, length.out = 1e4)
plot.new()
for(ii in seq_along(theta)){
curve(dbinom(57, 100, prob = theta[ii]))
}
lines(dbinom(57, 100, prob = theta[ii]))
x <- seq(0, 100, length.out = 1e4)
plot.new()
for(ii in seq_along(theta)){
lines(dbinom(57, 100, prob = theta[ii]))
}
cur
x <- seq(0, 100, length.out = 1e4)
plot.new()
for(ii in seq_along(theta)){
lines(dbinom(57, 100, prob = theta[ii]))
}
x <- seq(0, 100, length.out = 1e4)
plot.new()
for(ii in seq_along(theta)){
lines(dbinom(57, 100, prob = theta[ii]))
}
x <- seq(0, 100, length.out = 1e4)
plot(x, dbinom(57, 100, prob = theta[ii]))
df <- data.frame(x = x, theta = theta, ta=double(),VAR2=double(),ID=character())
df <- data.frame(
x <- seq(0, 100)
theta = theta,
df <- data.frame(
x <- seq(0, 100),
theta = theta,
for(ii in seq_along(theta)){
paste("prob", theta[ii], sep = "_") = dbinom(x, 100, theta[ii])
}
)
df <- data.frame(
x <- seq(0, 100),
theta = theta,
for(ii in seq_along(theta)){
paste0("prob", theta[ii], sep = "_") = dbinom(x, 100, theta[ii])
}
)
df <- data.frame(
x <- seq(0, 100),
theta = theta,
for(ii in seq_along(theta)){
assign(paste0("prob", theta[ii], sep = "_"), dbinom(x, 100, theta[ii]))
}
)
df <- data.frame(
x <- seq(0, 100),
for(ii in seq_along(theta)){
assign(paste0("prob", theta[ii], sep = "_"), dbinom(x, 100, theta[ii]))
}
)
df <- data.frame(
x <- seq(0, 100, by = 1),
for(ii in seq_along(theta)){
assign(paste0("prob", theta[ii], sep = "_"), dbinom(x, 100, theta[ii]))
}
)
seq(0, 100, by = 1)
df <- data.frame(
x <- seq(0, 100, by = 1),
for(ii in seq_along(theta)){
dbinom(x, 100, theta[ii])
}
)
dbinom(x, 100, theta[ii])
x <- seq(0, 100, by = 1)
dbinom(x, 100, theta[ii])
plot(prob0.1_)
plot(prob0.1_, type = 'l')
sapply(theta, dbinom(), x = x, size = 100)
sapply(theta, dbinom(x = x, size = 100)
sapply(theta, dbinom(x = x, size = 100))
lapply(theta, dbinom(x = x, size = 100))
apply(theta, dbinom(x = x, size = 100))
apply(theta, 2, dbinom(x = x, size = 100))
apply(theta, 1, dbinom(x = x, size = 100))
lapply(theta, function(y) dbinom(x = x, size = 100, prob = y))
lapply(theta, function(y) plot(dbinom(x = x, size = 100, prob = y)), type = 'l')
lapply(theta, function(y) plot(dbinom(x = x, size = 100, prob = y), type = 'l'))
par(mfrow = c(3,4))
lapply(theta, function(y) plot(dbinom(x = x, size = 100, prob = y), type = 'l'))
par(mfrow = c(3,4))
lapply(theta, function(y) plot(dbinom(x = x, size = 100, prob = y), type = 'l'))
par(mfrow = c(3,4))
lapply(theta, function(y) plot(dbinom(x = x, size = 100, prob = y), type = 'l'))
par(mfrow = c(3,4))
lapply(theta, function(y) plot(dbinom(x = x, size = 100, prob = y), type = 'l', ylab = NULL))
par(mfrow = c(3,4))
lapply(theta, function(y) plot(dbinom(x = x, size = 100, prob = y), type = 'l', ylab = " "))
par(mfrow = c(3,4))
lapply(theta, function(y) plot(dbinom(x = x, size = 100, prob = y), type = 'l', ylab = " "))
par(mfrow = c(3,4))
lapply(theta, function(y) plot(dbinom(x = x, size = 100, prob = y), type = 'l', ylab = " "))
par(mfrow = c(3,4))
lapply(theta, function(y) plot(dbinom(x = x, size = 100, prob = y), type = 'l', ylab = " "))
x <- seq(0,100)
par(mfrow = c(3,4))
lapply(theta, function(y) plot(dbinom(x = x, size = 100, prob = y), type = 'l', ylab = " "))
x <- seq(0,100)
#par(mfrow = c(3,4))
plot.new()
lapply(theta, function(y) lines(x, dbinom(x = x, size = 100, prob = y), type = 'l', ylab = " "))
x <- seq(0,100)
#par(mfrow = c(3,4))
plot.new()
lapply(theta, function(y) lines.default(x, dbinom(x = x, size = 100, prob = y), type = 'l', ylab = " "))
lapply(theta, function(y) curve(x, dbinom(x = x, size = 100, prob = y), type = 'l', ylab = " "))
x <- seq(0,100)
#par(mfrow = c(3,4))
plot.new()
lapply(theta, function(y) curve(x, dbinom(x = x, size = 100, prob = y), type = 'l', ylab = " "))
x <- seq(0,100)
#par(mfrow = c(3,4))
plot.new()
lapply(theta, function(y) curve(dbinom(x = x, size = 100, prob = y), type = 'l', ylab = " "))
theta <- seq(0, 1, by = 0.1)
x <- seq(0,100)
#par(mfrow = c(3,4))
plot.new()
lapply(theta, function(y) curve(dbinom(x = x, size = 100, prob = y), type = 'l', ylab = " "))
function(y) curve(dbinom(x = x, size = 100, prob = y), type = 'l', ylab = " ")
f <- function(y) curve(dbinom(x = x, size = 100, prob = y), type = 'l', ylab = " ")
plot.new()
f(theta[1])
f <- function(y) lines(dbinom(x = x, size = 100, prob = y), type = 'l', ylab = " ")
plot.new()
f(theta[1])
plot.new()
f(theta[1])
f <- function(y) plot(x, dbinom(x = x, size = 100, prob = y), type = 'l', ylab = " ")
lapply(theta, f)
theta
sapply(theta, f)
apply(theta, 1, f)
apply(theta, f)
apply(theta, FUN = f)
apply(theta, 0,  FUN = f)
apply(theta, 1  FUN = f)
apply(theta, 1,  FUN = f)
plot(x, dbinom(x = x, size = 100, prob = 0.9), type = 'l', ylab = " ")
par(mfrow = c(5, 2))
sapply(theta, f)
par(mfrow = c(4, 3))
sapply(theta, f)
